apiVersion: apps/v1
kind: Deployment
metadata:
  name: feastfrenzy-backend
  namespace: feastfrenzy
  labels:
    app: feastfrenzy-backend
    version: v1
    component: backend
    tier: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: feastfrenzy-backend
  template:
    metadata:
      labels:
        app: feastfrenzy-backend
        version: v1
        component: backend
        tier: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: feastfrenzy-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: backend
        image: feastfrenzy/backend:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 3000
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: SHUTDOWN_TIMEOUT
          value: "30000"
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-db-secret
              key: host
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-db-secret
              key: port
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-db-secret
              key: database
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-db-secret
              key: username
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-db-secret
              key: password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-app-secret
              key: jwt-secret
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-app-secret
              key: api-key
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: feastfrenzy-redis-secret
              key: url
              optional: true
        envFrom:
        - configMapRef:
            name: feastfrenzy-config
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health/liveness
            port: http
            httpHeaders:
            - name: User-Agent
              value: k8s-liveness-probe
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/readiness
            port: http
            httpHeaders:
            - name: User-Agent
              value: k8s-readiness-probe
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/liveness
            port: http
            httpHeaders:
            - name: User-Agent
              value: k8s-startup-probe
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 20
          successThreshold: 1
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: logs
        emptyDir:
          sizeLimit: 1Gi
      - name: uploads
        persistentVolumeClaim:
          claimName: feastfrenzy-uploads-pvc
      - name: config-volume
        configMap:
          name: feastfrenzy-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - feastfrenzy-backend
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      terminationGracePeriodSeconds: 45

---
apiVersion: v1
kind: Service
metadata:
  name: feastfrenzy-backend-service
  namespace: feastfrenzy
  labels:
    app: feastfrenzy-backend
    component: backend
    tier: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: feastfrenzy-backend
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 3000
    targetPort: metrics
    protocol: TCP

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: feastfrenzy-backend
  namespace: feastfrenzy
  labels:
    app: feastfrenzy-backend
    component: backend
automountServiceAccountToken: false

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: feastfrenzy-backend-netpol
  namespace: feastfrenzy
  labels:
    app: feastfrenzy-backend
    component: backend
spec:
  podSelector:
    matchLabels:
      app: feastfrenzy-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: feastfrenzy-frontend
    - podSelector:
        matchLabels:
          app: nginx-ingress
    - namespaceSelector:
        matchLabels:
          name: monitoring
      podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow database connections
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  # Allow Redis connections
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  # Allow HTTPS outbound for external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: feastfrenzy-uploads-pvc
  namespace: feastfrenzy
  labels:
    app: feastfrenzy-backend
    component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: efs-storage-class

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: feastfrenzy-backend-hpa
  namespace: feastfrenzy
  labels:
    app: feastfrenzy-backend
    component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: feastfrenzy-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: feastfrenzy-backend-pdb
  namespace: feastfrenzy
  labels:
    app: feastfrenzy-backend
    component: backend
spec:
  selector:
    matchLabels:
      app: feastfrenzy-backend
  minAvailable: 2