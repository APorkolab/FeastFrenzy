#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# FeastFrenzy Pre-commit Hook
# Comprehensive code quality checks and validations

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a Git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log_error "Not inside a Git repository"
    exit 1
fi

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    log_warning "No staged files found"
    exit 0
fi

log_info "Running pre-commit checks for staged files..."
echo "Staged files:"
echo "$STAGED_FILES" | while read -r file; do
    echo "  - $file"
done
echo

# Initialize counters
CHECKS_PASSED=0
CHECKS_FAILED=0
WARNINGS=0

# Helper function to run check and track results
run_check() {
    local check_name="$1"
    local check_command="$2"
    local is_optional="${3:-false}"
    
    log_info "Running $check_name..."
    
    if eval "$check_command"; then
        log_success "$check_name passed"
        CHECKS_PASSED=$((CHECKS_PASSED + 1))
        return 0
    else
        if [ "$is_optional" = "true" ]; then
            log_warning "$check_name failed (optional check)"
            WARNINGS=$((WARNINGS + 1))
            return 0
        else
            log_error "$check_name failed"
            CHECKS_FAILED=$((CHECKS_FAILED + 1))
            return 1
        fi
    fi
}

# 1. Run lint-staged (critical)
check_lint_staged() {
    if command -v npx >/dev/null 2>&1 && [ -f "package.json" ]; then
        npx lint-staged
    else
        log_warning "lint-staged not available, skipping"
        return 0
    fi
}

# 2. Check for secrets and sensitive information
check_secrets() {
    log_info "Checking for secrets and sensitive information..."
    
    # Patterns to detect secrets
    SECRET_PATTERNS=(
        "password\s*[:=]\s*['\"][^'\"]{8,}['\"]" 
        "secret\s*[:=]\s*['\"][^'\"]{16,}['\"]" 
        "api[_-]?key\s*[:=]\s*['\"][^'\"]{16,}['\"]" 
        "jwt[_-]?secret\s*[:=]\s*['\"][^'\"]{16,}['\"]" 
        "private[_-]?key\s*[:=]" 
        "AKIA[0-9A-Z]{16}"  # AWS Access Key
        "-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----"
    )
    
    SECRET_FOUND=false
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            for pattern in "${SECRET_PATTERNS[@]}"; do
                if grep -qiE "$pattern" "$file"; then
                    # Skip obvious false positives
                    if ! grep -qiE "(example|test|demo|placeholder|your_|replace_)" "$file"; then
                        log_error "Potential secret found in $file"
                        grep -nE "$pattern" "$file" | head -3
                        SECRET_FOUND=true
                    fi
                fi
            done
        fi
    done
    
    if [ "$SECRET_FOUND" = "true" ]; then
        log_error "‚ùå Secrets check failed - remove hardcoded secrets before committing"
        return 1
    fi
    
    return 0
}

# 3. Backend-specific checks
check_backend() {
    local backend_files=$(echo "$STAGED_FILES" | grep "^backend/" | grep -E '\.(js|json)$')
    
    if [ -z "$backend_files" ]; then
        log_info "No backend files staged, skipping backend checks"
        return 0
    fi
    
    log_info "Running backend checks..."
    
    # Change to backend directory
    cd backend || {
        log_error "Backend directory not found"
        return 1
    }
    
    # ESLint check
    if command -v npx >/dev/null 2>&1 && [ -f "package.json" ]; then
        if echo "$backend_files" | grep -q '\.js$'; then
            log_info "Running ESLint on backend files..."
            
            # Run ESLint on staged JS files
            BACKEND_JS_FILES=$(echo "$backend_files" | grep '\.js$' | sed 's|^backend/||')
            
            if ! npx eslint $BACKEND_JS_FILES; then
                log_error "ESLint found issues in backend files"
                cd ..
                return 1
            fi
            
            log_success "ESLint check passed"
        fi
    else
        log_warning "npm not available, skipping backend linting"
    fi
    
    cd ..
    return 0
}

# 4. Security checks
check_security() {
    log_info "Running security checks..."
    
    # Check for dangerous patterns
    SECURITY_ISSUES=false
    
    for file in $STAGED_FILES; do
        if [ -f "$file" ] && echo "$file" | grep -qE '\.(js|ts|jsx|tsx)$'; then
            # Check for dangerous eval usage
            if grep -q "eval\s*(" "$file"; then
                log_error "Dangerous eval() usage found in $file"
                SECURITY_ISSUES=true
            fi
            
            # Check for innerHTML usage (XSS risk)
            if grep -q "innerHTML\s*=" "$file"; then
                log_warning "innerHTML usage found in $file (potential XSS risk)"
                WARNINGS=$((WARNINGS + 1))
            fi
        fi
    done
    
    if [ "$SECURITY_ISSUES" = "true" ]; then
        return 1
    fi
    
    return 0
}

# Main execution
main() {
    log_info "üöÄ Starting pre-commit validation..."
    echo "======================================"
    
    # Run all checks
    run_check "Lint Staged" "check_lint_staged"
    run_check "Secrets Detection" "check_secrets"
    run_check "Backend Quality" "check_backend"
    run_check "Security Patterns" "check_security"
    
    echo "======================================"
    
    # Summary
    TOTAL_CHECKS=$((CHECKS_PASSED + CHECKS_FAILED + WARNINGS))
    
    log_info "üìä Pre-commit Summary:"
    echo "  ‚úÖ Passed: $CHECKS_PASSED"
    echo "  ‚ùå Failed: $CHECKS_FAILED"
    echo "  ‚ö†Ô∏è  Warnings: $WARNINGS"
    echo "  üìã Total: $TOTAL_CHECKS"
    
    if [ "$CHECKS_FAILED" -gt 0 ]; then
        echo
        log_error "üö´ Pre-commit checks failed!"
        log_error "Please fix the issues above before committing."
        echo
        log_info "üí° Quick fixes:"
        echo "  ‚Ä¢ Remove hardcoded secrets and use environment variables"
        echo "  ‚Ä¢ Fix linting errors with: npm run lint:fix"
        echo "  ‚Ä¢ Update documentation if needed"
        echo "  ‚Ä¢ Run tests to ensure code quality"
        
        exit 1
    fi
    
    if [ "$WARNINGS" -gt 0 ]; then
        echo
        log_warning "‚ö†Ô∏è  Pre-commit completed with warnings"
        log_warning "Consider addressing warnings for better code quality"
        echo
    else
        echo
        log_success "üéâ All pre-commit checks passed!"
        echo
    fi
    
    log_success "‚ú® Ready to commit!"
}

# Handle script interruption
cleanup() {
    echo
    log_warning "Pre-commit checks interrupted"
    exit 1
}

trap cleanup INT TERM

# Execute main function
main
