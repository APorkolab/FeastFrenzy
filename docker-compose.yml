version: '3.8'

services:
  # Database
  database:
    image: mysql:8.0
    container_name: feastfrenzy-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: feastfrenzy
      MYSQL_USER: feastfrenzy_user
      MYSQL_PASSWORD: feastfrenzy_pass
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./table_scripts.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - feastfrenzy-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: feastfrenzy-backend
    environment:
      NODE_ENV: development
      DB_HOST: database
      DB_USER: feastfrenzy_user
      DB_PASSWORD: feastfrenzy_pass
      DB_NAME: feastfrenzy
      DB_PORT: 3306
      PORT: 3000
      JWT_SECRET: your-super-secret-jwt-key
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - feastfrenzy-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: feastfrenzy-frontend
    environment:
      NODE_ENV: development
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - feastfrenzy-network
    depends_on:
      - backend
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: feastfrenzy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - feastfrenzy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx proxy for production-like setup
  nginx:
    image: nginx:1.25-alpine
    container_name: feastfrenzy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - feastfrenzy-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: feastfrenzy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - feastfrenzy-network
    restart: unless-stopped

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: feastfrenzy-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - feastfrenzy-network
    restart: unless-stopped

networks:
  feastfrenzy-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  prometheus_data:
  grafana_data: